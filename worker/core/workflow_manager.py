import asyncio
import json
import os
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime
from .workflow import Workflow
from states.workflow_states import PendingState, RunningState

class WorkflowManager:
    """
    Qu·∫£n l√Ω t·∫•t c·∫£ c√°c workflow v√† cho ph√©p th·ª±c thi ƒë·ªìng th·ªùi nhi·ªÅu workflow.
    H·ªó tr·ª£ t·∫£i workflow t·ª´ file JSON v√† qu·∫£n l√Ω proxy settings.
    """
    
    def __init__(self, max_concurrent_workflows: int = 5):
        self.workflows: Dict[str, Workflow] = {}
        self.max_concurrent_workflows = max_concurrent_workflows
        self.running_workflows: set = set()
        self.workflow_results: Dict[str, bool] = {}
        
        # Semaphore ƒë·ªÉ gi·ªõi h·∫°n s·ªë workflow ch·∫°y ƒë·ªìng th·ªùi
        self._semaphore = asyncio.Semaphore(max_concurrent_workflows)

    def load_workflow(self, json_path: str, proxy_settings: dict = None, workflow_name: str = None):
        """T·∫£i m·ªôt workflow t·ª´ file JSON v√† th√™m v√†o manager."""
        try:
            json_path = Path(json_path)
            if not json_path.exists():
                raise FileNotFoundError(f"File kh√¥ng t·ªìn t·∫°i: {json_path}")
            
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # S·ª≠ d·ª•ng t√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ho·∫∑c t√™n file l√†m t√™n workflow
            if not workflow_name:
                workflow_name = json_path.stem
            
            if workflow_name in self.workflows:
                print(f"‚ö†Ô∏è Workflow '{workflow_name}' ƒë√£ t·ªìn t·∫°i, ƒëang ghi ƒë√®...")
            
            workflow = Workflow(workflow_name, data, proxy_settings)
            self.workflows[workflow_name] = workflow
            print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng workflow: {workflow_name}")
            print(f"   - Nodes: {len(workflow.nodes)}")
            print(f"   - Proxy: {'C√≥' if proxy_settings else 'Kh√¥ng'}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i workflow t·ª´ {json_path}: {e}")
            raise

    def load_workflows_from_directory(self, directory_path: str, proxy_settings: dict = None):
        """T·∫£i t·∫•t c·∫£ workflow JSON t·ª´ m·ªôt th∆∞ m·ª•c."""
        directory = Path(directory_path)
        if not directory.exists():
            raise FileNotFoundError(f"Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {directory}")
        
        json_files = list(directory.glob("*.json"))
        if not json_files:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file JSON n√†o trong th∆∞ m·ª•c: {directory}")
            return
        
        print(f"üìÅ ƒêang t·∫£i {len(json_files)} workflow t·ª´: {directory}")
        
        loaded_count = 0
        for json_file in json_files:
            try:
                self.load_workflow(json_file, proxy_settings)
                loaded_count += 1
            except Exception as e:
                print(f"‚ùå B·ªè qua file {json_file.name}: {e}")
        
        print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {loaded_count}/{len(json_files)} workflow")

    def get_workflow(self, name: str) -> Optional[Workflow]:
        """L·∫•y workflow theo t√™n."""
        return self.workflows.get(name)

    def list_workflows(self) -> List[Dict]:
        """L·∫•y danh s√°ch t√≥m t·∫Øt t·∫•t c·∫£ workflow."""
        return [workflow.get_summary() for workflow in self.workflows.values()]

    def get_pending_workflows(self) -> List[Workflow]:
        """L·∫•y danh s√°ch c√°c workflow ch∆∞a t·ª´ng ch·∫°y ho·∫∑c ƒë√£ reset."""
        return [
            wf for wf in self.workflows.values() 
            if isinstance(wf.state, PendingState)
        ]

    def get_runnable_workflows(self) -> List[Workflow]:
        """L·∫•y danh s√°ch c√°c workflow c√≥ th·ªÉ ch·∫°y (Pending ho·∫∑c Failed)."""
        return [wf for wf in self.workflows.values() if wf.can_run()]

    def get_running_workflows(self) -> List[Workflow]:
        """L·∫•y danh s√°ch c√°c workflow ƒëang ch·∫°y."""
        return [
            wf for wf in self.workflows.values() 
            if isinstance(wf.state, RunningState)
        ]

    async def _run_workflow_with_semaphore(self, workflow: Workflow) -> bool:
        """Ch·∫°y workflow v·ªõi gi·ªõi h·∫°n ƒë·ªìng th·ªùi."""
        async with self._semaphore:
            self.running_workflows.add(workflow.name)
            try:
                result = await workflow.run()
                self.workflow_results[workflow.name] = result
                return result
            finally:
                self.running_workflows.discard(workflow.name)

    async def run_workflow_by_name(self, name: str) -> bool:
        """Ch·∫°y m·ªôt workflow c·ª• th·ªÉ b·∫±ng t√™n c·ªßa n√≥."""
        workflow = self.workflows.get(name)
        if not workflow:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y workflow c√≥ t√™n: {name}")
            return False
        
        if not workflow.can_run():
            print(f"‚ö†Ô∏è Workflow '{name}' kh√¥ng th·ªÉ ch·∫°y (tr·∫°ng th√°i: {workflow.state})")
            return False
        
        print(f"üöÄ ƒêang kh·ªüi ch·∫°y workflow: {name}")
        return await self._run_workflow_with_semaphore(workflow)

    async def run_multiple_workflows(self, names: List[str]) -> Dict[str, bool]:
        """Ch·∫°y nhi·ªÅu workflow c√πng l√∫c v√† tr·∫£ v·ªÅ k·∫øt qu·∫£."""
        if not names:
            print("‚ö†Ô∏è Danh s√°ch workflow r·ªóng")
            return {}
        
        # L·ªçc c√°c workflow h·ª£p l·ªá
        valid_workflows = []
        for name in names:
            workflow = self.workflows.get(name)
            if not workflow:
                print(f"‚ùå B·ªè qua workflow kh√¥ng t·ªìn t·∫°i: {name}")
                continue
            
            if not workflow.can_run():
                print(f"‚ö†Ô∏è B·ªè qua workflow kh√¥ng th·ªÉ ch·∫°y: {name} (tr·∫°ng th√°i: {workflow.state})")
                continue
            
            valid_workflows.append(workflow)
        
        if not valid_workflows:
            print("‚ùå Kh√¥ng c√≥ workflow h·ª£p l·ªá ƒë·ªÉ ch·∫°y")
            return {}
        
        print(f"üöÄ ƒêang kh·ªüi ch·∫°y {len(valid_workflows)} workflow ƒë·ªìng th·ªùi...")
        print(f"üìä Gi·ªõi h·∫°n ƒë·ªìng th·ªùi: {self.max_concurrent_workflows}")
        
        # T·∫°o tasks cho t·∫•t c·∫£ workflows
        tasks = [
            self._run_workflow_with_semaphore(workflow)
            for workflow in valid_workflows
        ]
        
        # Ch·∫°y t·∫•t c·∫£ tasks v√† ch·ªù ho√†n th√†nh
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # X·ª≠ l√Ω k·∫øt qu·∫£
        final_results = {}
        for i, workflow in enumerate(valid_workflows):
            if isinstance(results[i], Exception):
                print(f"‚ùå Workflow {workflow.name} g·∫∑p exception: {results[i]}")
                final_results[workflow.name] = False
            else:
                final_results[workflow.name] = results[i]
        
        # Th·ªëng k√™ k·∫øt qu·∫£
        successful = sum(1 for success in final_results.values() if success)
        total = len(final_results)
        
        print(f"\nüìä K·∫øt qu·∫£ th·ª±c thi:")
        print(f"   - Th√†nh c√¥ng: {successful}/{total}")
        print(f"   - Th·∫•t b·∫°i: {total - successful}/{total}")
        
        return final_results

    async def run_all_pending_workflows(self) -> Dict[str, bool]:
        """Ch·∫°y t·∫•t c·∫£ workflow ƒëang ·ªü tr·∫°ng th√°i Pending."""
        pending_workflows = self.get_pending_workflows()
        if not pending_workflows:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ workflow n√†o ·ªü tr·∫°ng th√°i Pending")
            return {}
        
        workflow_names = [wf.name for wf in pending_workflows]
        print(f"üéØ T√¨m th·∫•y {len(workflow_names)} workflow Pending: {workflow_names}")
        
        return await self.run_multiple_workflows(workflow_names)

    async def run_all_runnable_workflows(self) -> Dict[str, bool]:
        """Ch·∫°y t·∫•t c·∫£ workflow c√≥ th·ªÉ ch·∫°y ƒë∆∞·ª£c (Pending + Failed)."""
        runnable_workflows = self.get_runnable_workflows()
        if not runnable_workflows:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ workflow n√†o c√≥ th·ªÉ ch·∫°y")
            return {}
        
        workflow_names = [wf.name for wf in runnable_workflows]
        print(f"üéØ T√¨m th·∫•y {len(workflow_names)} workflow c√≥ th·ªÉ ch·∫°y: {workflow_names}")
        
        return await self.run_multiple_workflows(workflow_names)

    def reset_workflow(self, name: str) -> bool:
        """Reset m·ªôt workflow v·ªÅ tr·∫°ng th√°i Pending."""
        workflow = self.workflows.get(name)
        if not workflow:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y workflow: {name}")
            return False
        
        if workflow.name in self.running_workflows:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ reset workflow ƒëang ch·∫°y: {name}")
            return False
        
        workflow.reset()
        if name in self.workflow_results:
            del self.workflow_results[name]
        
        return True

    def reset_all_workflows(self):
        """Reset t·∫•t c·∫£ workflow v·ªÅ tr·∫°ng th√°i Pending."""
        reset_count = 0
        for name in list(self.workflows.keys()):
            if self.reset_workflow(name):
                reset_count += 1
        
        print(f"üîÑ ƒê√£ reset {reset_count} workflow")

    def remove_workflow(self, name: str) -> bool:
        """X√≥a m·ªôt workflow kh·ªèi manager."""
        if name not in self.workflows:
            print(f"‚ùå Workflow kh√¥ng t·ªìn t·∫°i: {name}")
            return False
        
        if name in self.running_workflows:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a workflow ƒëang ch·∫°y: {name}")
            return False
        
        del self.workflows[name]
        if name in self.workflow_results:
            del self.workflow_results[name]
        
        print(f"üóëÔ∏è ƒê√£ x√≥a workflow: {name}")
        return True

    def clear_all_workflows(self):
        """X√≥a t·∫•t c·∫£ workflow."""
        if self.running_workflows:
            print(f"‚ö†Ô∏è C√≥ {len(self.running_workflows)} workflow ƒëang ch·∫°y, kh√¥ng th·ªÉ x√≥a t·∫•t c·∫£")
            return False
        
        count = len(self.workflows)
        self.workflows.clear()
        self.workflow_results.clear()
        print(f"üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ {count} workflow")
        return True

    def get_status(self) -> dict:
        """L·∫•y tr·∫°ng th√°i t·ªïng quan c·ªßa WorkflowManager."""
        total = len(self.workflows)
        pending = len(self.get_pending_workflows())
        running = len(self.get_running_workflows())
        runnable = len(self.get_runnable_workflows())
        
        return {
            'total_workflows': total,
            'pending_workflows': pending,
            'running_workflows': running,
            'runnable_workflows': runnable,
            'max_concurrent': self.max_concurrent_workflows,
            'active_slots': len(self.running_workflows),
            'available_slots': self.max_concurrent_workflows - len(self.running_workflows)
        }

    def print_status(self):
        """In ra tr·∫°ng th√°i t·ªïng quan c·ªßa WorkflowManager."""
        status = self.get_status()
        print(f"\nüìä Tr·∫°ng th√°i WorkflowManager:")
        print(f"   - T·ªïng workflow: {status['total_workflows']}")
        print(f"   - Pending: {status['pending_workflows']}")
        print(f"   - Running: {status['running_workflows']}")
        print(f"   - C√≥ th·ªÉ ch·∫°y: {status['runnable_workflows']}")
        print(f"   - Gi·ªõi h·∫°n ƒë·ªìng th·ªùi: {status['max_concurrent']}")
        print(f"   - Slots ƒëang d√πng: {status['active_slots']}/{status['max_concurrent']}")
        
        if self.workflows:
            print(f"\nüìã Danh s√°ch workflow:")
            for workflow in self.workflows.values():
                status_icon = {
                    'Pending': '‚è≥',
                    'Running': 'üîÑ',
                    'Completed': '‚úÖ',
                    'Failed': '‚ùå'
                }.get(str(workflow.state), '‚ùì')
                
                proxy_info = " (c√≥ proxy)" if workflow.proxy_settings else ""
                print(f"   {status_icon} {workflow.name}: {workflow.state}{proxy_info}")

    def __repr__(self):
        return f"WorkflowManager(workflows={len(self.workflows)}, max_concurrent={self.max_concurrent_workflows})"