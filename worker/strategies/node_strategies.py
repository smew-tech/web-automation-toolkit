try:
    from playwright.async_api import Page
except ImportError:
    # Mock Page for testing without Playwright
    Page = object

from .base_strategy import NodeStrategy
import asyncio

class StartNodeStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        print("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu th·ª±c thi workflow...")

class StopNodeStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        print("‚èπÔ∏è Workflow ƒë√£ ho√†n th√†nh.")

class GotoNodeStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        url = params.get('url')
        if not url:
            raise ValueError("Node 'goto' y√™u c·∫ßu tham s·ªë 'url'.")
        print(f"üöÄ ƒêi·ªÅu h∆∞·ªõng t·ªõi: {url}")
        await page.goto(url)

class ClickNodeStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        selector = params.get('selector')
        if not selector:
            raise ValueError("Node 'click' y√™u c·∫ßu tham s·ªë 'selector'.")
        print(f"üñ±Ô∏è Click v√†o ph·∫ßn t·ª≠: {selector}")
        await page.locator(selector).click()

class FillNodeStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        selector = params.get('selector')
        value = params.get('value', '')
        if not selector:
            raise ValueError("Node 'fill' y√™u c·∫ßu tham s·ªë 'selector'.")
        print(f"‚úèÔ∏è Nh·∫≠p text '{value}' v√†o: {selector}")
        await page.locator(selector).fill(value)

class SelectOptionStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        selector = params.get('selector')
        value = params.get('value')
        if not selector or value is None:
            raise ValueError("Node 'selectOption' y√™u c·∫ßu tham s·ªë 'selector' v√† 'value'.")
        print(f"üìã Ch·ªçn option '{value}' trong: {selector}")
        await page.locator(selector).select_option(value)

class SetCheckboxStateStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        selector = params.get('selector')
        checked = params.get('checked', True)
        if not selector:
            raise ValueError("Node 'setCheckboxState' y√™u c·∫ßu tham s·ªë 'selector'.")
        print(f"‚òëÔ∏è {'Check' if checked else 'Uncheck'} checkbox: {selector}")
        await page.locator(selector).set_checked(checked)

class AssertVisibleStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        selector = params.get('selector')
        if not selector:
            raise ValueError("Node 'assertVisible' y√™u c·∫ßu tham s·ªë 'selector'.")
        print(f"üëÄ Ki·ªÉm tra hi·ªÉn th·ªã c·ªßa: {selector}")
        await page.locator(selector).wait_for(state='visible')
        print(f"‚úÖ Ph·∫ßn t·ª≠ {selector} hi·ªÉn th·ªã th√†nh c√¥ng")

class WaitNodeStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        timeout = params.get('timeout', 1000)
        print(f"‚è≥ Ch·ªù {timeout}ms...")
        await asyncio.sleep(timeout / 1000)

class ExtractTextStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        selector = params.get('selector')
        variable_name = params.get('variableName', 'extracted_text')
        if not selector:
            raise ValueError("Node 'extractText' y√™u c·∫ßu tham s·ªë 'selector'.")
        
        text = await page.locator(selector).text_content()
        if context:
            context[variable_name] = text
        print(f"üìù Tr√≠ch xu·∫•t text t·ª´ {selector}: '{text}' -> {variable_name}")

class ExtractMultipleStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        container_selector = params.get('containerSelector')
        item_selector = params.get('itemSelector')
        extract_commands = params.get('extractCommands', [])
        variable_name = params.get('variableName', 'extracted_data')
        
        if not container_selector or not item_selector:
            raise ValueError("Node 'extractMultiple' y√™u c·∫ßu 'containerSelector' v√† 'itemSelector'.")
        
        items = await page.locator(f"{container_selector} {item_selector}").all()
        results = []
        
        for item in items:
            item_data = {}
            for command in extract_commands:
                if command.startswith('EXTRACT_TEXT:'):
                    parts = command.split('>')
                    if len(parts) == 2:
                        selector_part = parts[0].replace('EXTRACT_TEXT:', '')
                        field_name = parts[1]
                        text = await item.locator(selector_part).text_content()
                        item_data[field_name] = text
                elif command.startswith('EXTRACT_ATTR:'):
                    parts = command.split('>')
                    if len(parts) == 2:
                        attr_part = parts[0].replace('EXTRACT_ATTR:', '')
                        field_name = parts[1]
                        selector_and_attr = attr_part.split('@')
                        if len(selector_and_attr) == 2:
                            selector_part, attr = selector_and_attr
                            attr_value = await item.locator(selector_part).get_attribute(attr)
                            item_data[field_name] = attr_value
            results.append(item_data)
        
        if context:
            context[variable_name] = results
        print(f"üìä Tr√≠ch xu·∫•t {len(results)} items -> {variable_name}")

class HttpRequestStrategy(NodeStrategy):
    async def execute(self, page: Page, params: dict, context: dict = None):
        import aiohttp
        
        method = params.get('method', 'GET').upper()
        url = params.get('url')
        data_source = params.get('dataSource')
        variable_name = params.get('variableName', 'http_response')
        
        if not url:
            raise ValueError("Node 'httpRequest' y√™u c·∫ßu tham s·ªë 'url'.")
        
        source_data = None
        if data_source and context:
            if data_source.startswith('GET_VARIABLE:'):
                var_name = data_source.replace('GET_VARIABLE:', '')
                source_data = context.get(var_name)
        
        print(f"üåê HTTP {method} request t·ªõi: {url}")
        
        async with aiohttp.ClientSession() as session:
            if method == 'GET':
                async with session.get(url) as response:
                    result = await response.json()
            else:
                async with session.request(method, url, json=source_data) as response:
                    result = await response.json()
            
            if context:
                context[variable_name] = result
            print(f"‚úÖ HTTP request ho√†n th√†nh -> {variable_name}")

# Factory ƒë·ªÉ l·∫•y strategy t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i node
def get_strategy(node_type: str) -> NodeStrategy:
    strategies = {
        "start": StartNodeStrategy(),
        "stop": StopNodeStrategy(),
        "goto": GotoNodeStrategy(),
        "click": ClickNodeStrategy(),
        "fill": FillNodeStrategy(),
        "selectOption": SelectOptionStrategy(),
        "setCheckboxState": SetCheckboxStateStrategy(),
        "assertVisible": AssertVisibleStrategy(),
        "wait": WaitNodeStrategy(),
        "extractText": ExtractTextStrategy(),
        "extractMultiple": ExtractMultipleStrategy(),
        "httpRequest": HttpRequestStrategy()
    }
    strategy = strategies.get(node_type)
    if not strategy:
        raise ValueError(f"Kh√¥ng t√¨m th·∫•y strategy cho lo·∫°i node: {node_type}")
    return strategy